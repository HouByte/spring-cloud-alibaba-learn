server:
  port: 9000

spring:
  application:
    name: e-commerce-gateway
  cloud:
    nacos:
      #服务发现
      discovery:
        enabled: true
        server-addr: 127.0.0.1:8848
        namespace: e-commerce-nacos-server
        metadata:
          management:
            context-path: ${server.servlet.context-path}/actuator
      #服务配置
      ## nacos 文件名：${spring.application.name}- ${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
      config:
        enabled: true
        # 配置中心地址
        server-addr: 127.0.0.1:8848
        # 配置文件格式
        file-extension: yaml
        # 服务命名空间
        namespace: e-commerce-nacos-server
        #启动刷新
        refresh-enabled: true
        # 支持多个共享 Data Id 的配置，优先级小于extension-configs,自定义 Data Id 配置 属性是个集合，内部由 Config POJO 组成。Config 有 3 个属性，分别是 dataId, group 以及 refresh
        shared-configs[0]:
          data-id: common.yaml # 配置文件名-Data Id
          group: DEFAULT_GROUP   # 默认为DEFAULT_GROUP
          refresh: true   # 是否动态刷新，默认为false
    sentinel:
      eager: true
      transport:
        port: 8720
        dashboard: 127.0.0.1:7777
      datasource:
#        # 通过本地文件方式, 基于服务级别的配置
#        dsl.file:
#          file: classpath:gateway-flow-rule-sentinel.json
#          # 代表服务级别的限流, 一步步点进去看, 文件类型
#          ruleType: gw-flow
#        # 通过本地文件方式, 细粒度对指定 api 进行配置
#        ds2.file:
#          file: classpath:gateway-flow-rule-api-sentinel.json
#          # 代表 API 分组, 一步步点进去看, 文件类型
#          ruleType: gw-api-group
        # 集成 Nacos
        ds1:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            # 测试时, 看看 Nacos 中修改是否能让 dashboard 生效, 就把第二个 count 也修改为 3
            data-id: gateway-flow-rule-sentinel
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-flow
        ds2:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: gateway-flow-rule-api-sentinel
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-api-group

    # 静态路由
#    gateway:
#      discovery:
#        locator:
#          enabled: true # gateway可以通过开启以下配置来打开根据服务的serviceId来匹配路由,默认是大写
#      routes:
#        - id: 163  # 路由 ID，保持唯一
#          uri: http://www.163.com/ # uri指目标服务地址，lb代表从注册中心获取服务
#          predicates: # 路由条件。Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）
#            - Path=/163
#        - id: good1  # 路由 ID，保持唯一
#          uri: http://localhost:8800/ # uri指目标服务地址，lb代表从注册中心获取服务
#          predicates: # 路由条件。Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）
#            - Path=/good/**,
#          #  若无StripPrefix过滤器时，gateway 发送请求到后台服务producer的url就是http://producer/producerInEureka/hello
#          #  若有StripPrefix过滤器时，gateway会根据StripPrefix=1所配的值（这里是1）去掉URL路径中的部分前缀（这里去掉一个前缀，即去掉producerInEureka）
#          filters:
#            - StripPrefix=1
#        - id: good2  # 路由 ID，保持唯一
#          uri: lb://e-commerce-demo-good # uri指目标服务地址，lb代表从注册中心获取服务
#          predicates: # 路由条件。Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）
#            - Path=/g/**,
#          filters:
#            - StripPrefix=1
#            # 它的作用和StripPrefix正相反，是在URL路径前面添加一部分的前缀 对应工程设置了server.servlet.context-path
#            - PrefixPath=/demo-good
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      retries: 3
    consumer:
      auto-offset-reset: latest
  zipkin:
    sender:
      type: kafka # 默认是 web
    base-url: http://localhost:9411/
  sleuth:
    sampler:
      # ProbabilityBasedSampler抽样策略
      probability: 1.0 #采样比例,1.0表示100%，默认是0.1
      # RateLimitingSampler抽样策略，设置了限速采集，spring.sleuth. sampler.probability属性值无效
      rate: 100 # 每秒间隔接受的 trace量
  main:
    allow-bean-definition-overriding: true  # 因为将来会引入很多依赖, 难免有重名的 bean
  profiles:
    active: dev



# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: e-commerce-gateway-router
        group: e-commerce

# 暴露端点
management:
  health:
    db:
      enabled: false
    mail:
      enabled: false   # 这个最好必须配置，否则如果有Spring Boot Admin 不断检测的话，可能导致邮件不能发送成功
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
